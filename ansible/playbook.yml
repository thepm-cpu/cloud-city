---
- name: Configure Cloud City Instance
  hosts: ec2
  become: true
  gather_facts: true
  vars:
    app_repo_url: "https://github.com/thepm-cpu/cloud-city.git"
    ssh_public_key: ""  # Passed from workflow
    server_ip: "{{ ansible_host }}"  # Dynamically uses the instance's public IP
  
  tasks:
    - name: Wait for connection
      wait_for_connection:
        timeout: 300

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install UFW and fail2ban
      apt:
        name:
          - ufw
          - fail2ban
        state: present

    - name: Install Nginx and OpenSSL (for self-signed cert)
      apt:
        name:
          - nginx
          - openssl
        state: present

    - name: Configure UFW - Allow SSH
      ufw:
        rule: allow
        port: '22'
        proto: tcp

    - name: Configure UFW - Allow HTTP/HTTPS (for Nginx)
      ufw:
        rule: allow
        name: 'Nginx Full'  # Allows 80/443

    - name: Configure UFW - Allow app/monitoring ports (fallback if direct access needed)
      ufw:
        rule: allow
        port: '{{ item }}'
        proto: tcp
      loop:
        - '5000'
        - '9090'
        - '9100'

    - name: Enable UFW
      ufw:
        state: enabled
        policy: deny  # Deny all except allowed

    - name: Enable fail2ban service
      service:
        name: fail2ban
        state: started
        enabled: yes

    - name: Generate self-signed SSL certificate
      command: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/selfsigned.key -out /etc/ssl/certs/selfsigned.crt -subj "/C=US/ST=YourState/L=YourCity/O=YourOrg/CN={{ server_ip }}"
      args:
        creates: /etc/ssl/certs/selfsigned.crt  # Idempotent: Skips if exists

    - name: Configure Nginx as reverse proxy
      template:
        src: templates/nginx.conf.j2  # You'll create this template file
        dest: /etc/nginx/sites-available/default
        mode: '0644'
      notify: Reload Nginx

    - name: Enable and start Nginx
      service:
        name: nginx
        state: started
        enabled: yes

    - name: Create deploy user
      user:
        name: deployuser
        state: present
        shell: /bin/bash
        create_home: yes

    - name: Set up authorized keys for deployuser
      authorized_key:
        user: deployuser
        state: present
        key: "{{ ssh_public_key }}"

    - name: Allow deployuser to have passwordless sudo
      copy:
        content: "deployuser ALL=(ALL) NOPASSWD: ALL"
        dest: /etc/sudoers.d/deployuser
        mode: '0440'

    - name: Disable password authentication for SSH
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication no'

    - name: Disable root login via SSH
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin no'

    - name: Restart SSH
      service:
        name: ssh
        state: restarted

  handlers:
    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded

  roles:
    - app
    - monitoring